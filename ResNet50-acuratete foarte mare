%% Incarcarea imagnilor de antrenare
digitDatasetPath = fullfile('D:\Downloads\15k\15k');
imds = imageDatastore(digitDatasetPath, ...
    'IncludeSubfolders',true,'LabelSource','foldernames');

%% Impartirea imaginilor in doua parti pentru antrenare si testare
 [trainingImages, testImages] = splitEachLabel(imds, 0.8, 'randomize');
%% Incarcarea retelei pre-antrenate
 Net = resnet50();
 
numClasses = numel(categories(trainingImages.Labels));
lgraph = layerGraph(Net);
newFCLayer = fullyConnectedLayer(numClasses,'Name','new_fc','WeightLearnRateFactor',10,'BiasLearnRateFactor',10);
lgraph = replaceLayer(lgraph,'fc1000',newFCLayer);
newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,'ClassificationLayer_fc1000',newClassLayer);

inputSize = Net.Layers(1).InputSize;
inputSize= [224 224];
augimdsTrain = augmentedImageDatastore(inputSize,trainingImages);
augimdsValidation = augmentedImageDatastore(inputSize,testImages);
%% vizualizarea arhitecturii
layers = Net.Layers 

%% Setarea parametrilor de invatare
opts = trainingOptions('sgdm', 'InitialLearnRate', 0.001,...
 'MaxEpochs', 20, 'MiniBatchSize', 32,...
 'LearnRateDropFactor', 0.01, ...
 'LearnRateDropPeriod', 10, ...
 'ValidationData',augimdsValidation, ...
 'Plot','training-progress');
 
%% Antrenarea retelei
trainedNet = trainNetwork(augimdsTrain, lgraph, opts);



classnet = load ('resnet50batch32.mat')

classNet = classnet.trainedNet.Layers

[YPred,probs] = classify(classnet.trainedNet, classnet.augimdsTrain);

featureLayer = 'new_fc'

testFeatures = activations(classnet.trainedNet,classnet.augimdsTrain, featureLayer, 'MiniBatchSize',32,'OutputAs', 'columns'); 

classifier = fitcecoc(testFeatures, classnet.trainingImages.Labels, 'Learner','Linear','Coding','onevsall','ObservationsIn','columns');
predictLabels = predict(classifier, testFeatures, 'ObservationsIn', 'columns');

testLabels = classnet.trainingImages.Labels;  
confMat = confusionmat(testLabels, predictLabels)

confMat = bsxfun(@rdivide, confMat, sum(confMat,2))
sum(confMat,2)

mean(diag(confMat)) 

yvalues = {'Acianthera Luteola'
'African Daisy'
'Anthurium'
'Buddleja'
'Cherry Blossom'
'Colorado four oclock'
'Common Dandelion'
'Daisy'
'Dames Rocket'
'Daphnes'
'Dayflowers'
'Duranta'
'Euonymus Fortunei'
'Evergreen Rose'
'Field Marigold'
'Floribunda'
'Hawaiian hibiscus'
'Hollyhocks'
'Hyacinth'
'Hypericum'
'Lilies'
'Lily'
'Lily of the Nile'
'Lobelia'
'Lobster-Claws'
'Lupine'
'Mexican Marigold'
'Not a flower'
'Nyctaginaceae'
'Oleander'
'Oxeye Daisy'
'Phlox'
'Poinsettia'
'Primrose'
'Purple Coneflower'
'Redwood Sorrel'
'Rosa Centifolia Muscosa'
'Rose'
'Sacred Lotus'
'Sasanqua Camellia'
'Shepherdia'
'Sunflower'
'Sweet Grass'
'Tricyrtis'
'Tulip'
'Violet'
'Waling-Waling'
'Water Lilies'
'Wild Peony'
'Woodland Sunflower'}


heatmap(yvalues, yvalues, confMat, 'FontSize', 10, 'CellLabelFormat','%.2f')
